/*
* SPDX-License-Identifier: Apache-2.0
        *
        * The OpenSearch Contributors require contributions made to
* this file be licensed under the Apache-2.0 license or a
* compatible open source license.
*
* Modifications Copyright OpenSearch Contributors. See
        * GitHub history for details.
*/

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.1.0-SNAPSHOT")
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
}
}

plugins {
    id 'java'
    id 'idea'
    id 'com.diffplug.spotless' version '6.25.0'
}

apply plugin: 'opensearch.opensearchplugin'

ext {
    opensearch_version = System.getProperty("opensearch.version", "3.1.0-SNAPSHOT")
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
    versions = [
            log4j: '2.23.1'
    ]
}

version = '3.1.0'

opensearchplugin {
    name 'storage-encryption'
    description 'Encrypts and decrypts index data at rest.'
    classname 'org.opensearch.index.store.CryptoDirectoryPlugin'
    version project.version
}

dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false
loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compileOnly "org.opensearch:opensearch:${opensearch_version}"

    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"

    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    testImplementation "commons-io:commons-io:2.13.0"

    // Integration test dependencies
    testImplementation "org.opensearch.plugin:reindex-client:${opensearch_version}"
}

test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    systemProperty 'tests.security.manager', 'false'
    jvmArgs += [
            '--enable-preview',
            '--enable-native-access=ALL-UNNAMED'
    ]
}



compileJava {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation' << '-Werror'
    options.compilerArgs += ['--enable-preview']
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += "--enable-preview"
    options.release = 24
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addStringOption('Xdoclint:all', '-quiet')
    options.addStringOption('tag', 'opensearch.internal:a:Internal:')
    options.addStringOption("source", "24")
    options.addBooleanOption("-enable-preview", true)
    failOnError = true
}





task allTests {
    dependsOn test
    group = 'Verification'
    description = 'Runs all tests'
}



spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'
        licenseHeaderFile 'spotless.license.java'
        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}